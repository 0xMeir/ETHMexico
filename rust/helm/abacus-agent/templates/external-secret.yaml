apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "abacus-agent.fullname" . }}-external-secret
  labels:
    {{- include "abacus-agent.labels" . | nindent 4 }}
  annotations:
    update-on-redeploy: "{{ now }}"
spec:
  secretStoreRef:
    name: {{ include "abacus-agent.cluster-secret-store.name" . }}
    kind: ClusterSecretStore
  refreshInterval: "1h"
  # The secret that will be created
  target:
    name: {{ include "abacus-agent.fullname" . }}-secret
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "abacus-agent.labels" . | nindent 10 }}
      data:
        {{/* RPC URLs */}}
        ABC_BASE_OUTBOX_CONNECTION_URL: {{ print "'{{ .home_rpc | toString }}'" }}
{{/*
   * For each network, create an environment variable with the RPC endpoint.
   * The templating of external-secrets will use the data section below to know how
   * to replace the correct value in the created secret.
   */}}
        {{- range .Values.abacus.inboxChains }}
        {{- if not .disabled }}
        ABC_BASE_INBOXES_{{ .name | upper }}_CONNECTION_URL: {{ printf "'{{ .%s_rpc | toString }}'" .name }}
        {{- end }}
        {{- end }}
  data:
  - secretKey: home_rpc
    remoteRef:
      key: {{ printf "%s-rpc-endpoint-%s" .Values.abacus.runEnv .Values.abacus.outboxChain.name }}
{{/*
   * For each network, load the secret in GCP secret manager with the form: environment-rpc-endpoint-network,
   * and associate it with the secret key networkname_rpc.
   */}}
  {{- range .Values.abacus.inboxChains }}
  {{- if not .disabled }}
  - secretKey: {{ printf "%s_rpc" .name }}
    remoteRef:
      key: {{ printf "%s-rpc-endpoint-%s" $.Values.abacus.runEnv .name }}
  {{- end }}
  {{- end }}
